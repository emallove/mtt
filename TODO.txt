Notes from the first MTT developer's conference!

MTT Design goals:
 - Simple, easy to use INI file
 - Provide many hooks to provide support for everything, but not necessarily
   implementing the support directly.
 - MTT 1.0 file format may not be compatible MTT 2.0
 - For 1.0, focus on test suites the Open MPI group cares about
   - Correctness first, then performance, then other MPIs

============================================================================

Task list for 1.0/0.5:

Andrew Friedley
---------------

Finish up perfbase backend development
 - Finish perfbase xml output support
 - Look at organizing perfbase so that one run is a test suite, not one test
 - Finish email.pl to complete the perfbase reporting backend
Split reporter into formatting/data collection and transport
 - Transport - text, perfbase, psi, rsync, scp
 - Data collection - report mpi install, test build, test results


Jeff Squyres
------------

- add --dryrun option to show what *would* happen (probably should
  imply --verbose as well), but don't actually *do* anything (don't
  even alter any .xml internal state)

- finish fixing NPB build .pm to preoperly prefix all ini fieldnames
  and overall work properly

- fix up sample.ini to match new linkage and module field names

- make test results be output in a single output rather than reporting
  glumps of tests at a time

Active & Passive report mode - make reporting a phase?
 - Use cron for pushing reports through disconnected setups
   - Checking for new results to report every 10 mins
   - Gets daily before builds occur
   - Build daily on compile side, followed by a qsub to start compute nodes
   - Assume compile and compute nodes share filesystem

MTT global params:
 [MTT]
 name_delimiter=, # delimiter between names of references in name= field
 run_if_partial_build_fail=1 # run tests that DID build if test build fails



Jim Barker
----------

Disconnected scenarios - mpi/test get proxies
 - Support different protocols - via module?  need rsync, scp, ...
 - Stage parameters:
   - force
   - retry
   - timeout

Split reporter into formatting and transport
Support for these test suites:
 intel
 ibm - Brian will check all tests compile/run under make/make check
 imb
 npb
 netpipe
 mpich - Brian may set up an OMPI version
Support for 'tcl' modules via perl bindings


Someone needs to write a 'simple' test specify module:
 module = simple
 simple_np = ...
 simple_exec = ...
 simple_argv = ...
 simple_pass = ...
 simple_timeout = ...

behavior should be combinatorial for the np, exec, and argv, if some sort of
lists are provided all combinations should be generated. pass and timeout are
considered constant, and should only have one value.

============================================================================

Features NOT to worry about for 1.0:

 - Expand stages beyond test build - specify - run
 - Support for gromacs and other complicated output
 - Expanded disconnected support
 - Less reliance on user to develop cron jobs and such
 - Support more test suites, MPIs
   - HPL
- Finer grained control when forcing stages to rerun - rather than rerunning a
  whole stage, let's select which INI section we want to rerun





- A lot of the parameters / report fields in the MPI install phase
  seem to assume that the MPI is built from source.  This assumption
  should be removed, and only report such fields from MPI install
  modules that need them.

- In the email script running behind perfbase:
  - Summarize how many installs/builds/runs failed
  - Give a different subject if anything failed

- From code review:
  - make the version number that perfbase.php checks be the same
    version number that the client uses to send -- e.g., check it in a
    file somewhere
  - brian's point about fork/exec in php code -- perhaps we should use
    apache as a proxy to a standalone process that is not running as
    apache.  two issues:
    - helps performance, because we don't fork/exec
    - don't run as apache, so that if our php or perfbase has a bug,
      that user will have limited
  - other things can print to php/stderr:
    - getcwd()
    - fclose()
    - putenv()
    - proc_open() (?)
    --> should we turn off all error reporting (based on a config
        variable)?
  - MTT_DEBUG should be ditched -- change to $debug

- Ideas from working with Rainer in Houston:
  - Allow use of environment variables in the INI - an &env() function?
  - Add &split()
  - Allow for compiling the MPI with one compiler, but compiling the
    test suites with another compiler.  I believe we can do this
    already, by using &shell() for the test suite build and linking by
    hand.  If anything, we need a way of gettting good path
    information to do it.
  - Support for other schedulers
    - More specifically, killing off jobs.  If we qsub to do an mpirun, how do
      we kill it?
  - IF any failures occure, have MTT generate an INI file which can then be
    fed back into MTT, and only reproduce the work leading to the failures.
  - Optimize vpath - have multiple builds off of one source tree

- Add an option to have MTT only report results, and do nothing else.

- Finish Test/Build/NPB.pm, Test/Run/NPB.pm

- Should we save the output of the test build module (i.e., the list
  of tests) and use that (by default) in the test run module?
  - Build has capability to filter (e.g., Intel filters based on what
    bindings exist), but run/simple does not.  So you can not build
    the fortran tests, but then still try to run them of "tests =
    src/&cat(file)" -- how can we get the filtering down there
    (easily)?

- Add better error checking to perfbase.php
  - can we check to ensure that we're not inputting a duplicate result
    into perfbase?  what happens if we input a duplicate result into
    perfbase? 
    - Perfbase reports an error if duplicate data is given.  Make sure the
      client handles the error correctly.

- do perfbase http put better; can all the queued http put's be
  combined into a single put? (i.e., make server side php smarter?)

- be able to handle case where svn checkouts go badly and svn
  ends up waiting for input (E.g., username or password).  Should be
  able to detect this somehow and know to kill it.

- add pre_hook and post_hook to all sub modules that run before the
  main action and after the main action; intent is to [optionally]
  give some arguments sufficient to launch another engine.pl in the
  next phase (e.g., have a post_hook to BuildMPI that runs engline.pl
  in the BuildTests phase).

- make centralized database download set of constants for the db
  (e.g., how many lines of stderr to report, etc.)

- need a lockfile to protect all the XML files in case multiple
  engines running simultaneously

