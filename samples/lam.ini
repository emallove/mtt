#======================================================================
# Cisco configuration
#======================================================================

[MTT]
http_proxy = http://proxy-sjc-1.cisco.com:8080, http://proxy-sjc-2.cisco.com:8080
ftp_proxy = http://proxy-sjc-1.cisco.com:8080, http://proxy-sjc-2.cisco.com:8080
https_proxy = http://proxy-sjc-1.cisco.com:8080, http://proxy-sjc-2.cisco.com:8080
#----------------------------------------------------------------------

[Lock]
module = MTTLockServer
mttlockserver_host = svbu-mpi.cisco.com
mttlockserver_port = 8018


#======================================================================
# MPI get phase
#======================================================================

[MPI get: lam-nightly-trunk]
mpi_details = LAM

module = LAM_Snapshot
lam_snapshot_url = http://www.lam-mpi.org/download/files/nightly

#======================================================================
# Install MPI phase
#======================================================================

[MPI install: LAM/GNU]
mpi_get = lam-nightly-trunk
save_stdout_on_success = 1
merge_stdout_stderr = 0

module = LAM
lam_vpath_mode = none
lam_make_all_arguments = -j 8
lam_compiler_name = gnu
lam_compiler_version = &get_gcc_version()
lam_configure_arguments = "CFLAGS=-g -pipe" --with-boot-tm=/opt/pbs

#----------------------------------------------------------------------

[MPI install: LAM/Intel 9.0]
mpi_get = lam-nightly-trunk
save_stdout_on_success = 1
merge_stdout_stderr = 0
vpath_mode = none
make_all_arguments = -j 8
make_check = 1
env_module = intel-compilers/9.0
compiler_name = intel
compiler_version = &get_icc_version()
configure_arguments = CC=icc CXX=icpc F77=ifort FC=ifort "CFLAGS=-g -wd188" --enable-picky --enable-debug --with-openib=/usr/local/ofed --with-udapl=/usr/local/ofed --with-tm=/opt/pbs

module = LAM

#----------------------------------------------------------------------

[MPI install: LAM/Intel 9.1]
mpi_get = lam-nightly-trunk
save_stdout_on_success = 1
merge_stdout_stderr = 0
vpath_mode = none
make_all_arguments = -j 8
make_check = 1
env_module = intel-compilers/9.1
compiler_name = intel
compiler_version = &get_icc_version()
configure_arguments = CC=icc CXX=icpc F77=ifort FC=ifort "CFLAGS=-g -wd188" --enable-picky --enable-debug --with-openib=/usr/local/ofed --with-udapl=/usr/local/ofed --with-tm=/opt/pbs

module = LAM

#----------------------------------------------------------------------

[MPI install: LAM/PGI 6.2]
mpi_get = lam-nightly-trunk
save_stdout_on_success = 1
merge_stdout_stderr = 0
vpath_mode = none
make_all_arguments = -j 1
make_check = 1
env_module = pgi-compilers/6.2.5
compiler_name = pgi
compiler_version = &get_pgcc_version()
configure_arguments = CC=pgcc CXX=pgCC F77=pgf77 FC=pgf90 CFLAGS=-g --enable-picky --enable-debug --with-openib=/usr/local/ofed --with-udapl=/usr/local/ofed --with-tm=/opt/pbs --with-wrapper-cxxflags=-fPIC

module = LAM

#----------------------------------------------------------------------

[MPI install: LAM/PGI 7.0.2]
mpi_get = lam-nightly-trunk
save_stdout_on_success = 1
merge_stdout_stderr = 0
vpath_mode = none
make_all_arguments = -j 1
make_check = 1
env_module = pgi-compilers/7.0.2
compiler_name = pgi
compiler_version = &get_pgcc_version()
configure_arguments = CC=pgcc CXX=pgCC F77=pgf77 FC=pgf90 CFLAGS=-g --enable-picky --enable-debug --with-openib=/usr/local/ofed --with-udapl=/usr/local/ofed --with-tm=/opt/pbs --with-wrapper-cxxflags=-fPIC

module = LAM

#----------------------------------------------------------------------

[MPI install: LAM/Pathscale 3.0]
mpi_get = lam-nightly-trunk
save_stdout_on_success = 1
merge_stdout_stderr = 0
vpath_mode = none
make_all_arguments = -j 4
make_check = 1
env_module = pathscale-compilers/3.0
compiler_name = pathscale
compiler_version = &get_pathcc_version()
configure_arguments = CC=pathcc CXX=pathCC FC=pathf90 F77=pathf90 --enable-picky --enable-debug --with-openib=/usr/local/ofed --with-udapl=/usr/local/ofed --with-tm=/opt/pbs 

module = LAM

#======================================================================
# MPI run details
#======================================================================

[MPI Details: LAM]
before_any_exec = lamboot -s

exec = mpirun C &test_executable() &test_argv()

after_each_exec = lamclean

after_all_exec = lamhalt

#======================================================================
# Test get phase
#======================================================================

[Test get: trivial]
module = Trivial

#----------------------------------------------------------------------

[Test get: ibm]
module = SVN
svn_url = https://svn.open-mpi.org/svn/ompi-tests/trunk/ibm
svn_post_export = <<EOT
./autogen.sh
EOT

#----------------------------------------------------------------------

[Test get: mpicxx]
module = SVN
svn_url = https://svn.open-mpi.org/svn/ompi-tests/trunk/cxx-test-suite
svn_post_export = <<EOT
./autogen.sh
EOT

#----------------------------------------------------------------------

[Test get: netpipe]
module = SVN
svn_url = https://svn.open-mpi.org/svn/ompi-tests/trunk/NetPIPE_3.6.2

#======================================================================
# Test build phase
#======================================================================

[Test build: trivial]
test_get = trivial
save_stdout_on_success = 1
merge_stdout_stderr = 1

module = Trivial

#----------------------------------------------------------------------

[Test build: ibm]
test_get = ibm
save_stdout_on_success = 1
merge_stdout_stderr = 1

module = Shell
shell_build_command = <<EOT
./configure CC=mpicc CXX=mpic++ F77=mpif77
make
EOT

#----------------------------------------------------------------------

[Test build: mpicxx]
# v1.1 is known to fail this test -- we added a bunch of stuff to the
# text that only exists in v1.2 and beyond
test_get = mpicxx
save_stdout_on_success = 1
merge_stdout_stderr = 1

module = Shell
shell_build_command = <<EOT
./configure CC=mpicc CXX=mpic++
make
EOT

#----------------------------------------------------------------------

[Test build: netpipe]
test_get = netpipe
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

module = Shell
shell_build_command = <<EOT
make mpi
EOT

#======================================================================
# Test Run phase
#======================================================================

[Test run: trivial]
test_build = trivial
pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
skipped = 0
timeout = &max(10, &test_np())
save_stdout_on_pass = 1
merge_stdout_stderr = 1
stdout_save_lines = 100
stderr_save_lines = 100
np = &env_max_procs()

specify_module = Simple
simple_first:tests = &find_executables(".")

#------------------------------------------------------------------------
[Test run: ibm]
test_build = ibm
pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
skipped = &and(&test_wifexited(), &eq(&test_wexitstatus(), 77))
timeout = &max(30, &multiply(10, &test_np()))
save_stdout_on_pass = 1
merge_stdout_stderr = 1
np = &env_max_procs()

specify_module = Simple
simple_first:tests = &find_executables("collective", "communicator", \
                                       "datatype", "dynamic", "environment", \
                                       "group", "info", "io", "pt2pt", "topology", \
                                       "onesided" )

simple_fail:tests = environment/abort environment/final
simple_fail:pass = &and(&test_wifexited(), &ne(&test_wexitstatus(), 0))
simple_fail:exclusive = 1
simple_fail:timeout = &env_max_procs()

#----------------------------------------------------------------------
     
[Test run: mpicxx]
test_build = mpicxx
pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
timeout = &max(30, &multiply(10, &test_np()))
save_stdout_on_pass = 1
merge_stdout_stderr = 1
np = &env_max_procs()

specify_module = Simple
simple_pass:tests = src/mpi2c++_test

#----------------------------------------------------------------------

[Test run: netpipe]
test_build = netpipe
pass = &eq(&test_wexitstatus(), 0)
timeout = -1
save_stdout_on_pass = 1
# Ensure to leave this value as "-1", or performance results could be lost!
stdout_save_lines = -1
merge_stdout_stderr = 1
np = 2

specify_module = Simple
analyze_module = NetPipe
simple_pass:tests = NPmpi

#======================================================================
# Reporter phase
#======================================================================

[Reporter: IU database]
module = MTTDatabase

mttdatabase_realm = OMPI
mttdatabase_url = https://www.open-mpi.org/mtt/submit/
# OMPI Core: Change this to be the username and password for your
# submit user.  Get this from the OMPI MTT administrator.
mttdatabase_username = you must set this value
mttdatabase_password = you must set this value
# OMPI Core: Change this to be some short string identifying your
# cluster.
mttdatabase_platform = you must set this value

#----------------------------------------------------------------------

# This is a backup for while debugging MTT; it also writes results to
# a local text file

[Reporter: text file backup]
module = TextFile

textfile_filename = $phase-$section-$mpi_name-$mpi_version.txt

textfile_summary_header = <<EOT
hostname: &shell("hostname")
uname: &shell("uname -a")
who am i: &shell("who am i")
EOT

textfile_summary_footer =
textfile_detail_header =
textfile_detail_footer =

textfile_textwrap = 78
