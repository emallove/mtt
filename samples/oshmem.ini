[MTT]
scratch = &getenv("HOME")/mtt-scratch
logfile =  &scratch_root()/mtt_output.log

[MPI Details: oshmem]
params = -mca btl_openib_warn_default_gid_prefix 0 -mca spml yoda
exec = <<EOF
export OSHMEM_HOME=&test_prefix()
export EXE=&test_executable_abspath()
set -x
$OSHMEM_HOME/bin/shmemrun -np &test_np() @params@ $EXE &test_argv()
EOF

#======================================================================
# MPI get phase
#======================================================================

[MPI get: oshmem]
mpi_details = oshmem
module = SCM
scm_module = SVN
scm_url = http://svn.open-mpi.org/svn/ompi/trunk

#======================================================================
# Install MPI phase
#======================================================================

[MPI Install: oshmem_gcc]
mpi_get = oshmem
ompi_compiler_name = gnu
ompi_configure_arguments = --enable-mpirun-prefix-by-default --enable-orterun-prefix-by-default --with-openib --with-pmi
module = OMPI
ompi_make_all_arguments = -j &get_processor_count()
ompi_autogen = 1
save_stdout_on_success = 1
merge_stdout_stderr = 1

#======================================================================
# Test get phase
#======================================================================

[Test get: oshmem_test_suite]
module = Download
download_url = http://bongo.cs.uh.edu/site/sites/default/site_files/openshmem-test-suite-release-1.0d.tar.bz2

#======================================================================
# Test build phase
#======================================================================

[Test build: oshmem_test_suite]
test_get = oshmem_test_suite
save_stdout_on_success = 1
merge_stdout_stderr = 1
module = Shell

shell_build_command = <<EOT

cd performance_tests/micro_benchmarks
sed -i 's/#include <stdio.h>/#include <stdio.h>\n#include <sys\/time.h>\n/g' ./barrier_performance.c
cd ../../

make examples CC=&test_prefix_pretty()/bin/shmemcc
make C_feature_tests CC=&test_prefix_pretty()/bin/shmemcc
make micro_bench CC=&test_prefix_pretty()/bin/shmemcc
make F_feature_tests SHMEM_F90=&test_prefix_pretty()/bin/shmemfort
EOT


#======================================================================
# Test Run phase
#======================================================================

[Test run]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 0))
specify_module = Simple
save_stdout_on_pass = 1
stdout_save_lines = -1
merge_stdout_stderr = 1
np = &env_max_procs()

[Test run: oshmem_test_suite_examples]
include_section = Test run
test_build = oshmem_test_suite
simple_first:tests = &find_executables("examples/")
simple_first:argv = &enumerate("10 10")
skipped = 0
np = 4
timeout = 00:02:00

[Test run: oshmem_test_suite_C_feature_tests]
include_section = Test run
test_build = oshmem_test_suite
simple_first:tests = &find_executables("feature_tests/C/")
skipped = 0
timeout = 00:02:00

[Test run: oshmem_test_suite_Fortran_feature_tests]
include_section = Test run
test_build = oshmem_test_suite
simple_first:tests = &find_executables_regexp('.*[.]x$',"feature_tests/Fortran/")
skipped = 0
np = 2
timeout = 00:02:00

[Test run: oshmem_test_suite_performance_tests]
include_section = Test run
test_build = oshmem_test_suite
simple_first:tests = &find_executables_regexp('(.*barrier.*)|(.*broadcast.*)|(.*get.*)|(.*put.*)',"performance_tests/micro_benchmarks/")
skipped = 0
timeout = 00:10:00

#======================================================================
# Reporter phase
#======================================================================

[Reporter: text file backup]
module = TextFile

textfile_filename = $phase-$section-$mpi_name-$mpi_version.txt

textfile_summary_header = <<EOT
Hostname: &shell("hostname")
uname: &shell("uname -a")
Username: &shell("who am i")
EOT

textfile_summary_footer = <<EOT
Detailed report at &get_ini_val("mtt","scratch_root")
EOT
textfile_detail_header = oshmem from ompi trunk
textfile_detail_footer =

textfile_textwrap = 78

