Just a place to accumulate notes.

mtt_epoch - Feb. 1, 2007
    test_run tuples: 1033189
    Time to convert: 804m49.355s ~= 13.5 hrs

Feb. 1, 2007 - March 1, 2007
    test_run tuples: 1441022
    Time to convert: <working...>

mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
Some of the results submitted are not *really* tests, but seem like MTT mis-configuration:

Some of the invalid tests:
mmmmmmmmmmmmmmmmmmmmmmmmm
mtt3_1=> select * from test_names where test_name ~* 'mca_' limit 5;
 test_name_id | test_suite_id |         test_name          | description 
--------------+---------------+----------------------------+-------------
          743 |             2 | mca_make_configure.pl      | 
          911 |             2 | libmca_common_sm.so.0.0.0  | 
          912 |             2 | libmca_common_sm.la        | 
          913 |             2 | mca_maffinity_first_use.so | 
          914 |             2 | mca_maffinity_first_use.la | 
(5 rows)
mtt3_1=> select count(*) from test_names where test_name ~* 'mca_';
 count 
-------
   115
(1 row)
mmmmmmmmmmmmmmmmmmmmmmmmm

Which were run something like:
mmmmmmmmmmmmmmmmmmmmmmmmm
mpirun  -np 4 --prefix /scratch/ws/hpcstork-mtt-run-2007-01-24--01-00-00---hlrs-icc-0/installs/ompi-nightly-v1.2/intel_warnings/1.2b4r13253/install ./installs/ompi-nightly-trunk/intel_warnings/1.3a1r13252/install/lib/openmpi/mca_sds_singleton.so
mmmmmmmmmmmmmmmmmmmmmmmmm

Seems to be a single MTT user:
mmmmmmmmmmmmmmmmmmmmmmmmm
mtt3_1=> select distinct compute_cluster_id from test_run join test_names on test_run.test_name_id = test_names.test_name_id where test_name ~* 'mca_';
 compute_cluster_id 
--------------------
                 67
(1 row)
mtt3_1=> select * from compute_cluster where compute_cluster_id = 67;
 compute_cluster_id | platform_name | platform_hardware |               platform_type               | os_name |   os_version   
--------------------+---------------+-------------------+-------------------------------------------+---------+----------------
                 67 | ia64 at HLRS  | ia64              | linux-white_box_enterprise_linux_3.0-ia64 | Linux   | Linux 2.6.14.3
(1 row)
mmmmmmmmmmmmmmmmmmmmmmmmm



mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
I have found a few test_build_ids that don't have results. For example test_build_id 5939 below:
<mmmmmmmmmmmmmmmmmm>
mtt3=> select * from test_build where test_build_id = 5939;
test_build_id | mpi_install_id | suite_name | compiler_id
---------------+----------------+------------+-------------
          5939 |           1308 | ibm        |           8
(1 row)
<mmmmmmmmmmmmmmmmmm>

Is referenced by test_run 546 times:
<mmmmmmmmmmmmmmmmmm>
mtt3=> select count(*) from test_run where test_build_id = 5939;
count
-------
   546
(1 row)
<mmmmmmmmmmmmmmmmmm>

But has no result showing it was ever built:
<mmmmmmmmmmmmmmmmmm>
mtt3=> select count(*) from test_build join results on results.phase_id = test_build.test_build_id where test_build.test_build_id = 5939;
count
-------
     0
(1 row)
mtt3=> select count(*) from test_build join results on results.phase = 2 and results.phase_id = test_build.test_build_id where test_build.test_build_id = 5939;
count
-------
     0
(1 row)
<mmmmmmmmmmmmmmmmmm>

My conversion script (at the moment) raises an error about this since it doesn't transfer over test_builds unless they have results associated with them. I can probably change this policy so it will insert test_build 5939 above but with bogus data, but I was wondering what you guys think before deciding.

It doesn't seem like there are a large number of these types of missing data pieces, unfortunately I don't have a number to quantify this at the moment.

This test is from sometime in 2007-03.

mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
