#!/usr/bin/env python
#
# Copyright (c) 2016      Intel, Inc. All rights reserved.
# $COPYRIGHT$
#
# Additional copyrights may follow
#
# $HEADER$
#

import os
from BaseMTTUtility import *

class Compilers(BaseMTTUtility):
    def __init__(self):
        BaseMTTUtility.__init__(self)
        self.options = {}
        return

    def print_name(self):
        return "Compilers"

    def print_options(self, testDef, prefix):
        lines = testDef.printOptions(self.options)
        for line in lines:
            print prefix + line
        return

    def execute(self, log, testDef):
        # GNU is probably the most common, so check that one as soon as
        # possible.  Intel pretends to be GNU, so need to check Intel
        # before checking for GNU.
        if self.check_c_if(testDef, "defined(__INTEL_COMPILER) || defined(__ICC)", "icc"):
            compiler = "intel"
            status, vsn = self.check_version("icc", testDef)
        elif self.check_c_ifdef(testDef, "__PATHSCALE__", "foo"):
            compiler = "pathscale"
            status, vsn = self.check_version("cc", testDef)
        elif self.check_c_ifdef(testDef, "__GNUC__", "gcc"):
            compiler = "gnu"
            status, vsn = self.check_version("gcc", testDef)
        else:
            status = 1;
            compiler = "None"
            version = "Unknown"
        # record the result
        log['status'] = status
        log['compiler'] = compiler
        log['version'] = vsn
        return

    def check_compile(self, testDef, macro, c_code, compiler):
        # write out a little test program
        fh = open("spastic", 'w')
        for ln in c_code:
            print >> fh,ln
        fh.close()

        # Attempt to compile it
        mycmdargs = [compiler, "-c", "spastic"]
        status, stdout, stderr = testDef.execmd.execute(mycmdargs, testDef)

        # cleanup the test
        os.remove("spastic")

        if 0 == status:
            return True
        return False

    def check_c_ifdef(self, testDef, macro, compiler):

        c_code = ["/*", "* This program is automatically generated by compiler.py",
                  "* of MPI Testing Tool (MTT).  Any changes you make here may",
                  "* get lost!", "*",
                  "* Copyrights and licenses of this file are the same as for the MTT.",
                  "*/", "#ifndef " + macro, "#error", "choke me", "#endif"]

        return self.check_compile(testDef, macro, c_code, compiler);

    def check_c_if(self, testDef, macro, compiler):

        c_code = ["/*", "* This program is automatically generated by compiler.py",
                  "* of MPI Testing Tool (MTT).  Any changes you make here may",
                  "* get lost!", "*",
                  "* Copyrights and licenses of this file are the same as for the MTT.",
                  "*/", "#if !( " + macro + " )", "#error", "choke me", "#endif"]

        return self.check_compile(testDef, macro, c_code, compiler);

    def check_version(self, compiler, testDef):
        # try the universal version option
        mycmdargs = [compiler, "--version"]
        status, stdout, stderr = testDef.execmd.execute(mycmdargs, testDef)
        if 0 != status:
            # try a -V
            mycmdargs = [compiler, "-V"]
            status, stdout, stderr = testDef.execmd.execute(mycmdargs, testDef)
        return status, stdout

